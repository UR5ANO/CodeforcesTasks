"""
Это обучающий файл по языку программирования Python.
Python отличается от C++ (того языка, который ты пробовал
учить ранее) тем, что он более высокоуровневый и интерпретируемый.
Высокоуровневый значит 2 вещи:
    1) одна и та же задача на высокоуровневом языке
решается быстрее (меньшим количеством команд и кода), чем на низкоуровневом;
    2) Не нужно лезти "под капот" языка, можно просто использовать его возможности.
Интерпретируемый (в отличие от компилируемого C++) значит, что этот язык проще изучать,
но написанные на нем программы работаю гораздо медленее (что для нас сейчас совсем не важно)

Далее будет краткий интерактивный экскурс, читать его нужно так:
все комментарии нужно прочитывать, все строчки кода нужно переписывать в интерпретатор
(можно и копировать, но переписывать гораздо полезнее) и запускать.
Комментариями считаются строки, которые начинаются с символа # (однострочные комментарии)
или строки, заключенные в тройные кавычки (как например этот блок текста)
Строчки кода - все остальные строки
Интерпретатор - это окошко, в котором можно исполнять строчки кода и видеть результат.
"""

# Теперь начнем экскурс. Ниже приведена первая строчка кода:
print('hello!')

# В примере выше мы вызвали стандартную функцию print и передали ей как аргумент строку 'hello!'
# Перед тем, как вызвать функцию, мы неявно создали переменную 'hello!'.
# У каждой переменной есть тип, тип переменной 'hello!' - строка, мы можем в этом убедиться:
print(type('hello!'))

# Тип переменной еще называют классом, поэтому интерпретатор
# написал, что класс нашей переменной - str (сокращение от string - строка)
# В примере выше мы вызвали еще одну стандартую функцию, которая возвращает тип любой переменной
# Теперь рассмотрим основные типы переменных в Python:

# bool, бинарный тип:
print(type(True))
print(type(False))

# int - целочисленный тип (допускает и положительные, и отрицательные значения)
print(type(42))
print(type(-10))

# float - десятичные дроби, также с любым знаком
print(type(-4.0))
print(type(5.552))
print(type(1.))

# str - строки могут быть в одинарных, двойных и даже тройных кавычках,
# главное, чтобы открывающая и закрывающая кавычки были одинаковые
# Между одинарными и двойными кавычками нет разницы, а тройные позволяют
# делать многострочные строки:
print(type('Shostka'))
print(type("City"))
print(type("""Big
    big
    string
"""))

# Выше мы научились создавать одноразовые переменные, но часто нужно запоминать их значение
# чтобы использовать позже. Объявить (создать, сохранить) переменную можно так:
my_name = "Володя"

# Теперь усложним приветствием.
print('hello, ' + my_name + '!')

# Здесь мы использовали созданную выше переменную.
# Кроме того, мы использовали оператор '+' для конкатенции (склейки строк)
# Как альтернативный вариант, можно было сделать вот так:
print('hello, %s!' % my_name)

# Здесь мы использовали другой оператор: '%', который выполнил интерполяцию (подстановку значения в шаблон) строки.
# '%s' значит для оператора '%', что в это место нужно подставить строку.

# Теперь рассмотрим еще один, но чуть более сложный тип переменной, - список.
a = [1, 2, 3, 4, 5]
print(a)

# к списку можно обращаться по индексу, индексация начинается с 0:
print(a[0])
print(a[2])
print(a[1])

# Список можно изменять также по индексу:
a[1] = 100500
print(a[1])
print(a)

# В общем случае, индекс списка состоит из 3 чисел, разделенных двоеточием.
# с какого элемента(включительно):по какой элемент(не включая):через сколько элементов
# может быть указано 1, 2 или 3 числа, например:
print(a[0:3])
print(a[0:5:2])
print(a[::2])
print(a[1:-1])

# Также в список можно добавлять элементы с помощью метода append:
a.append(6)
print(a)
a = a[:-1]
print(a)

# Для работы со список есть специальная конструкция, а именно цикл for:
for n in a:
    print(n)

# Цикл for для каждого элемента списка выполняет команды, описанные в теле цикла
# Все команды в теле цикла начинаются с табуляции, таким образом находясь на одну табуляцию (4 пробела)
# правее, чем команды за телом цикла
# Так, мы можем посчитать сумму чисел в списке:
sum = 0
for n in a:
    sum = sum + n
print(sum)

# Мы можем выводить промежуточную сумму после каждого изменения:
sum = 0
for n in a:
    sum = sum + n
    print(sum)
print(sum)

# Команда print в теле цикла выполняется на каждой итерации цикла,
# команда print за телом цикла выполняется один раз после завершения цикла

# Теперь мы умеем писать программы, которые что-то делают.
# В написании программ неизбежно появление ошибок, поэтому важно уметь их понимать и исправлять
# Чтобы увидеть первую ошибку, изменим немножко список и снова попробуем посчитать сумму:
a[1] = 'Я сломаю твой код!'
print(a)
sum = 0
for n in a:
    sum = sum + n
    print(sum)
print(sum)

# Итак, мы видим пугающий красный текст. Из него нужно понять 3 вещи:
# 1. Что случилось?
# TypeError: unsupported operand type(s) for +: 'int' and 'str' - мы пытались к числу прибавить строку, а так делать нельзя
# 2. Где случилось?
# Вот в этой строчке sum = sum + n, где мы и пытались прибавить число к строке
# 3. Что делать?
# Очевидно, нужно избежать прибавления строки к числу.
# Один из вариантов решения проблемы: игнорировать строки при вычислении суммы.
# Для этого необходимо изучить еще одну конструкцию: if. if выполняет команды в ее теле, только есть условие правдиво:
sum = 0
for n in a:
    if type(n) != str:
        sum = sum + n
    print(sum)
print(sum)

# Здесь мы добавили несколько вещей:
# 1. Использовали оператор сравнения '!=' (не равно). Операторов сравнения есть всего несколько:
# '==' (равно, не путать с оператором присваивания '=')
# '!=' (не равно)
# '>' больше
# '<' меньше
# '>=' больше равно
# '<=' меньше равно
# Оператор присваивания в зависимости от аргументов, которые сравниваются, возвращает булевское значение: True или False
# Оператор сравнения принимает булевское значение (то, что получилось в результате сравнения type(n) != str) и
#   выполняет команды в теле, если передано True
#   пропускает их, если передано False
# Как видно в примере выше, тело оператора if выделено еще одной табуляцией (находится еще правее, чем тело цикла for)

# Это вся информация, необходимая для закрепления первого урока.
# Далее есть несколько задач, которые нужны закрепления информации:

# 1. Вывести на экран все элементы списка, которые больше 5:
l = [5, 10, 3, 15, 6]
...

# 2. Найти максимальный элемент в списке:
l = [5, 10, 3, 15, 6]
max_l = ?
...
print(max_l)

# *3. Вывести элементы в обратном порядке:
l = [5, 10, 3, 15, 6]
...

# *4. Отсортировать элементы списка по возрастанию и вывести на экран:
l = [5, 10, 3, 15, 6]
...
